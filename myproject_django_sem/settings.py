import os

"""
Django settings for myproject_django_sem project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

SECRET_KEY = os.getenv('SECRET_KEY')
# SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEY = 'django-insecure-=h+ujzbz8u^!f5&=!1k%h!h2gx0r!+fz#v&t1nx!vq763m3f&_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True


ALLOWED_HOSTS = [
    '127.0.0.1',
    'Artyomka9524.pythonanywhere.com',
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myapp',
    'myapp2',
    'games_app',
    'games2_app',
    'blog_app',
    #'debug_toolbar',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myproject_django_sem.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myproject_django_sem.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        #'ENGINE': 'django.db.backends.sqlite3',
        #'NAME': BASE_DIR / 'db.sqlite3',
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'alexalex2023$default',
        'USER': 'alexalex2023$default',
        'PASSWORD': os.getenv('MYSQL_PASSWORD'),
        'HOST': 'alexalex2023.mysql.pythonanywhere-services.com',
        'OPTIONS': {
            'init_command': "SET NAMES 'utf8mb4';SET sql_mode='STRICT_TRANS_TABLES'",  'charset': 'utf8mb4',
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'media'


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# LOGGING = {
#     'version': 1,                               # версия логирования
#     'disable_existing_loggers': False,          #сохранение предыдущих логов
#     'formatters': {                             # настройка вида - формата логирования на выбор simple Или verbose
#         'simple': {
#             'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s',
#         },
#         'verbose': {
#             'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
#             'style': '{',
#         },
#     },
#     'handlers': {                               # обрабочики - где выводить логи
#         'console': {                            # вывод в консоль
#             'class': 'logging.StreamHandler',
#             'formatter': 'verbose', # добавлен параметр formatter
#         },
#         'file': {                               # вывод в файл
#             'class': 'logging.FileHandler',
#             'filename': './log/django.log',                 #создаст файл изапишет туда логи
#             'formatter': 'verbose',              # указываем формат verbose
#             'encoding': 'utf-8'                 # чтобы в файле отображалась кириллица
#         },
#     },
#     'loggers': {                            #инициализация логов
#         'django': {                         #для Dj логов используем вывод в консоль и файл
#             'handlers': ['console', 'file'],
#             'level': 'INFO',
#         },
#         'games_app': {                      # для логов приложения games_app используем вывод в консоль и файл
#             'handlers': ['console', 'file'],
#             'level': 'INFO',                # записываются у=урони логов от info и выше
#             'propagate': True,
#         },
#         'myapp': {                      # для логов приложения my_app используем вывод в консоль и файл
#             'handlers': ['console', 'file'],
#             'level': 'INFO',
#             'propagate': True,
#         },
#     },
# }
#


